[[polyfills_chapter_1]]
== The Current State of Web Polyfills

=== Polyfilling: Past, Present and Future

If you play a game of word association with a room full of front-end developers, _polyfill_ will no-doubt receive mention from more than a few participants. This word, traditionally a synonym for _fallback_, _spackle_ or _patch_--unfamiliar to many developers until just a few years ago--has become a staple of conversations about modern and open web technologies. And while polyfilling has traditionally functioned as a practice for delivering modern features to non-modern browsers ("oldIE," meaning IE 6-8, is increasingly a synonym for this term), the concept has expanded over the last few years to include the addition of new and experimental platform features to *all browsers*, including the newest and most cutting-edge.

Like many things in the world of technology, the practice of polyfilling is far older than its name. And even though the term itself is a recent addition to the web platform cannon, as long as we've had multiple browsers with varying and inconsistent implementations of web platform features--which is just about always--we've had the practice of polyfilling. Every developer who mucks with the string prototype to add a +trim()+ function for *oldIE* is creating a polyfill, as is the developer who lovingly adds a home-grown +window.addEventListner()+ function to IE 8 in the hopes of simplifying her event management code. As a practice, polyfilling has been around the block a few times, but its naming coincides with a time in which its use on the web exploded: the advent of HTML5.

Much like the coining of "Ajax" by Jesse-James Garret in 2005, the practice was given a name at a time when developers where increasingly looking at HTML5 and thinking "how can I get me some of that in my apps?" Part of the answer at the time was polyfilling and, in many ways, it's been an adequate answer. For the last four years, polyfilling has allowed developers to target multiple browsers with new technologies, while not leaving those oldIE users behind. This is polyfilling's past, and also its present. We still live in a world where the predominant use case for a polyfill is "filling the gaps" in a browser that doesn't yet natively provide a feature or features that we need. 

Were that the end of the story, I don't think an entire book on polyfills would be very interesting. Thankfully, it's not. Instead, a subtle shift in how we look at polyfilling is taking place in the web community. Rather than simply building polyfills to modernize older browsers, a new class of library is starting to emerge. These libraries, sometimes called "forward polyfills" or prolyfills exist to try out new ideas and unproven specifications on the web. This can be something as simple as a library that adds Classes to JavaScript in accordance with the ES6 specification, or as complex as a full suite of libraries that provide advance support for Web Components.

It's a powerful application, and this new class of polyfill is shifting the balance of power on the web. Increasingly, these libraries are allowing us, lowly web developers, to emerge as not just authors of web sites and applications, but as architects of the web platform itself. It's an exciting time to be a polyfiller, so I hope you'll read on.

=== A Book on Polyfilling? Really? 

When it comes to the act of patching browser capabilities via polyfills, developers fall into two camps: those *using* polyfills to provide modern web platform capabilities in their sites, and those building polyfills for the broader web community. The book is meant for the latter camp, and is intended to serve as an introduction to polyfilling, to provide a set of principles and practical guidelines for building *reliable polyfills*, and finally, to provide a roadmap for the future of polyfilling. As I shared previously, that future is the construction of polyfills that add developer-defined and cutting-edge features into the browser as a way to prove the value of new and unproven ideas.

At present, countless articles and book chapters exist which cover the subject of polyfilling. However, in nearly every case, these articles are targeted at polyfill consumers, and not the intrepid developers who build these libraries. One notable exception is http://addyosmani.com/blog/writing-polyfills[Addy Osmani's guide for Polyfill developers], an introductory read that I highly recommend. Beyond Addy's article, there are few resources, online or in print, which cover the topic of polyfills from the viewpoint of the polyfill developer. A lack of definitive resources for building these libraries means that we, as developers must strike out on our own, or slowly dig through other libraries for patterns and ideas.

My sincere hope is that this book will "close the gap" by serving as a *fieldbook* for polyfill developers. We'll start with a cursory introduction to polyfilling on the web platform, and I'll share some principles and guidelines for building polyfills that developers can rely on. Once the guidelines have been established, we'll shift the discussion to an in-depth walkthrough of building a real-life, reasonably complex polyfill, by example.

Once I’ve covered the ins-and outs of building polyfills, the last few chapters will shift the focus to an emerging trend on the web platform: the “experimental feature” polyfill, or *prollyfill*. This pattern, as seen in libraries like AngularJS and Google's http://polymer-project.org[Polymer Project], enables developers to test and work with emerging concepts, sometimes ahead of even the browser vendors themselves. By the time we're done, you'll have all the tools you need to build reliable polyfills for the present, and the future, of the web.

=== What is a Polyfill (and what is it not)?

In 2009, as he was working on the seminal book, -Introducing HTML5-, Remy Sharp conceived and coin the term "polyfill" to describe a practice that he'd seen increasingly applied by developers adopting HTML5 and CSS3 in their applications. In a post on his blog from 2010, he defines it like so:

[quote, Remy Sharp, http://remysharp.com/2010/10/08/what-is-a-polyfill/]
____
A polyfill, or polyfiller, is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. Flattening the API landscape if you will.
____

For those of you in the UK, the term "polyfill," might evoke images of "polyfilla," a paste that Britons use to cover cracks and holes in walls (We call this "speckling," in the US). It's a convenient image that happens to describe exactly what good polyfills strive to do: fill in the gaps and holes of browsers so that a developer can go to work on a smooth, consistent surface.

The term also has a more direct, deeper meaning if analyzed in parts, "poly" and "fill." *Fill* denotes the hole in the browser that the library exists to address, and *poly* means that the problem can be solved by using any number of techniques. JavaScript might be the predominant polyfilling approach, but there are several examples of Polyfills that fall back to plugins like Silverlight  or Flash to provide functionality to the browser. Notable examples of these are the http://code.google.com/p/explorercanvas/[excanvas] plugin, which falls back to Silverlight to provide Canvas support in IE6-8 and http://mediaelementjs.com/[mediaelement.js], which provides consistent HTML5 media support across browsers.

According to Sharp, the practice that we now refer to as polyfilling needed a new term because existing terms didn't map to the idea of replicating the API of native browser features using JavaScript. Polyfills are distinct from "shimming" and "progressive enhancement," in that regard. "Shim" does describe a library or bit of code that adds features or functionality to the browser, and may even provide an abstraction that spans cross-browser inconsistencies, but these libraries often introduce their own, specialized APIs. jQuery, which was first introduced as a way to normalize DOM interactions across browsers, is a popular example of a shim. 

"Progressive enhancement," and it's cousin "graceful degradation," didn't work for this idea either, simply because these terms imply building sites that either gain functionality with JavaScript, or which remain functional in the absence of JavaScript. Polyfills often depend on JavaScript in the absence of native browser functionality and, as such, neither of these terms seemed appropriate.

When Remy Sharp conceived of the term "polyfill," he wasn't attempting to coin a new phrase for posterity but, rather, to describe an increasingly relevant practice that would undoubtably become even more important as HTML5 and the "open web" continued to proliferate throughout the development world. The web development community needed a term to describe this burgeoning practice, and Sharp had one to offer. In spite of claims from time-to-time that the word should be changed (or "Americanized," as is often the true motive), the term caught on . I don't expect that it, or the practice that it represents to go anywhere, anytime soon. Quite the opposite, in fact, which is why you hold this book in your hands.  

=== The Polyfilling Spectrum

With a proper explanation of polyfills out of the way, let's spend a few moments talking about types of polyfills, or the polyfilling spectrum. While Remy Sharp's definition does have a pure, simple interpretation, polyfills in reality don't always respect this definition to a T. In this section, we'll look at some common "classes" of polyfills, as well as the pros and cons of choosing each approach when building your own polyfill.

==== The Shim

A "shim" is not a polyfill, at least by definition, but it does fall on the left side of our contrived polyfill spectrum. This is for two reasons: 1) people often do use the two terms interchangeably and 2) shims and polyfills share similar goals, in spite of their different approaches. 

A shim is a piece of code, typically JavaScript, that's designed to add functionality into the browser that is not already present, or to bring a level of consistency to various browser implementations. Unlike the various polyfill types, shims do not map their functionality to a built-in or specified browser API, instead choosing to implement their own API that developers must learn and adopt in order to leverage provided functionality. 

As stated above, jQuery--specifically the library's sizzle selector engine and event management functionality--is a classic example of a shim. Selecting an element from the DOM with jQuery requires a specific action on the part of the developer. For instance, consider the simple selector in <<EX1>>.

[[EX1]]
.Using jQuery to interact with the DOM
====
[source, js]
----
$('#myTodoList').find('li.dueToday')
  .css(‘background-color’,‘yellow’)
  .end()
  .find(‘li.overdue’)
  .css(‘background-color’, ‘red’);
----
====

The sample above is doing a number of things, not the least of which is performing three separate element selections from the DOM. This code is guaranteed to work consistently across all browsers, from IE6 on up, and there's nothing special I need to do to manage how jQuery performs this selection from one browser to the next. Internally, jQuery does manage a complex algorithm for DOM selection based on the browser, using HTML5's +querySelector/querySelectorAll+ syntax if supported, or the classic +documentGetElementById/documentGetElementsByClassName+ approach, if not. That said, because all of this functionality is abstracted into a different API from that specified by the W3C, as opposed to adding its functionality to the +document+ object prototype, it fits more into the definition of shim than that of a polyfill.

In spite of the fact that shims fall on the start of our polyfilling spectrum, they do still offer a couple of advantages. For starters, their opt-in nature means that developers leveraging their functionality aren't doing so by accident and, thus potentially overriding built-in functionality in an unexpected way, which can happen with pure polyfills. A developer adopting a shim (hopefully) knows what they're getting themselves into and has chosen that shim for a reason.

Another advantage to shims is that the library developer isn't constrained by the specified API of built-in functionality. If he wishes to diverge from the API to improve the library's interface for developers--for instance, the chain ability of jQuery selectors and methods--he's free to do so without worrying about affecting or breaking a standardized API.

While some see the opt-in nature of shims as a advantage to this approach, others disagree. To these developers, adopting a shim is akin to taking on technical debt that requires rework by the developer to remove. Imagine a developer who adopts a shim with the goal of gaining some as-yet unimplemented functionality in the browser. If, at some point in the future, the browsers add this native functionality, the developer must remove or update the shim to offer the native experience, and concomitant performance gains, to the end user. As long as the shim remains in place, the end-user will receive a less-than ideal experience in their perfectly-capable browser. Polyfills, on the other hand, tend to have a built-in answer to this problem, as we'll see next.

==== The "Opt-in" Polyfill

The next polyfill type on our list is the "opt-in" polyfill. These libraries qualify as polyfills in the sense that they operate on standard APIs. That said, they are "opt-in" because the developer must take action in order to leverage them.

As an example, consider http://css3pie.com/documentation/pie-js/[PIE], a popular CSS3 Polyfill. PIE, aka "Progressive Internet Explorer" exists to provide CSS3 features like +border-radius+, +box-shadow+ and +border-image+ to, you guessed it, IE6-8. The library works in one of two ways. Developers can use the relevant CSS properties, as normal, and then opt-into PIE by including a +behavior+ property at the end of the CSS rule, as shown in <<EX2>> [ADD CALLOUT]

[[EX2]]
.Activate PIE using CSS
====
[source, css]
----
#myElement {
  background: #DDD;
  padding: 2em;
  -o-border-radius: 1em;
  -moz-border-radius: 1em;
  -webkit-border-radius: 1em;
  border-radius: 1em;
  behavior: url(PIE.htc);
}
----
====

In this example, the "opt-in" happens when the browser's parser encounters the +behavior+ property. If the +behavior+ property looks foreign to you, you're not alone. This property, which is only supported in IE 5.5 and above, allows you to use CSS to add a script to a selector, with the purpose of implementing DHTML components. (remember those?) The +.htc+ extension on our PIE file is a DHTML component-specific format that's essentially JavaScript plus some additional vendor-specific elements that define the components. 

When loaded, +PIE.htc+ uses the CSS properties defined in it's loading selector--+border-radius+ in this case--to fake those features using the HTC component. So, in summary, PIE is using a decade-old IE-specific hack in order to add support for CSS3 to IE 6-8. That's pretty clever! And not only that, but it's efficient. Since other browsers don't support the +behavior+ property, it's existence will be overlooked and the HTC file will be neither loaded nor parsed by browsers that already support CSS3 properties.

If the thought of using DHTML to fake CSS3 support in IE isn't your cup 'o tea, you can also use JavaScript to add PIE to your apps, as illustrated in <<EX3>>

[[EX3]]
.Activate PIE using JavaScript
====
[source, js]
----
Modernizr.load([
  test: Modernizr.borderradius,
  nope: 'PIE.js',
  complete: function() {
    if (window.PIE) {
      // Select all elements with class 'rounded'
      $('.rounded').each(function() {
        PIE.attach(this);
      });
    }
  }
]);
----
====

In this example, we start by leveraging Modernizr's built-in +Modernizr.load+ capabilities to determine if the CSS3 +border-radius+ property is supported. Hopefully you're familiar with http://modernizr.com[Modernizr] as a Polyfill consumer. If not, I highly recommend familiarizing yourself with the library since, as a Polyfill author, you'll need to be intimately familiar with the various ways developers perform feature detection before loading your Polyfill. That is, unless you do the feature detection for them, but we'll get to that in a moment.

A key feature of Modernizr.load is the ability to conditionally load a script file based on the truthiness or falseyness of a test. With all Polyfills, it's important to consider the users that don't need a Polyfill just as much as you consider those that do. Ideally, you never want to load a library that a user doesn't need, and Polyfills are no exception. With +Modernizr.load+, you can load libraries only when the browser requires them.

Once PIE.js is loaded, the +complete+ function is called. At this point, I "opt-in" to PIE by selecting elements from the DOM via jQuery and then passing each element into the +PIE.attach+ function, which does the fancy corner-rounding for me. It's a bit more code than the DHTML approach, but still simple enough to implement.

Opt-in Polyfills have a couple of advantages over shims. For starters, these libraries work against standard APIs, meaning that developers don't have to learn a new API or write a bunch of needless boilerplate in order to use them. What's more, the "opt-in" footprint of these libraries is relatively small and self-contained. When the developer no longer needs to support an "opt-in" polyfill, the offending code is easy to track down and remove.

On the other hand, "opt-in" polyfills do still introduce technical debt in the form of extra code, even if that code is often a few extra lines. A line or two of extra code is all find and good with example code, but imagine having to add "opt-in" support for a few hundred selectors across a large site. Now, imagine what it would be like to remove all of that opt-in code a few years down the road. Doesn't sound like much fun, does it?  Thankfully, there are other approaches that are designed to be a bit more "hands off."

==== The Pure Polyfill

==== The "Prolyfill," or forward polyfill 

=== Why Polyfills still matter 

In the current error of faster updates to browsers--including our favorite punching-bag Internet Explorer--it's easy to dismiss Polyfills as a passing fad that colored the early days of HTML5 adoption. In some ways, this claim isn't unfair. When Polyfills first entered the developer consciousness, their goal was singular: easing the path to HTML5 adoption by reducing the amount of platform-specific code needed to leverage a new feature. Had the polyfilling pattern never grown beyond this scope, we probably wouldn't be talking about them much, these days.

And yet, polyfills remain part of our everyday front-end vernacular. I believe this is for a couple of reasons. For starters, for HTML5 and beyond (the "open web," if you will), browser vendors continue to adopt emerging technologies at differing paces. While some browsers tend to add features as early as possible for the purpose of developer testing and feedback, others prefer to iterate solely in the standards bodies, only adopting features as they move further through the process and mature. It's outside of the scope of this book and well beyond this author's patience to render judgment on which of these approaches is more idea, but these differences are worth mentioning because they point to the continued importance of Polyfills. As long as browser x implements a different set of emerging features than browsers y or z, the need for Polyfills will remain.

Another reason for the continued importance of the polyfill is the emergence of the "Prolyfill" or forward polyfill. As discussed in the last section, the Prolyfill variation has appeared over the last year in response to an ever-growing number of developers desiring to get involved earlier in the standards process, often even before a new API is introduced in any of the browsers. Prolyfills are a tool of choice for developers looking to "extend the web forward." In the recent "http://extensiblewebmanifesto.org/[Extensible Web Manifesto]," polyfills were described as the catalyst that aids in creating a "virtuous cycle" between web developers and the W3C's standardization process:

[quote, http://extensiblewebmanifesto.org/[Extensible Web Manifesto]]
----
Making new features easy to understand and polyfill introduces a virtuous cycle:

* Developers can ramp up more quickly on new APIs, providing quicker feedback to the platform while the APIs are still the most malleable.
* Mistakes in APIs can be corrected quickly by the developers who use them, and library authors who serve them, providing high-fidelity, critical feedback to browser vendors and platform designers.
* Library authors can experiment with new APIs and create more cow-paths for the platform to pave.
----

Over the last few years, Polyfills have grown from an HTML5 adoption tactic to a popular library development pattern and finally, a full-blown standardization strategy. As a polyfill developer, you may be building your library with one of these targets in mind. Regardless of whether your polyfill is practical, tactical or strategic in nature, you'll want to keep some building principles and practices in mind as you set out to build your library. In the next chapter, we'll discuss these strategies.