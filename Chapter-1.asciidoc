[[polyfills_chapter_1]]
== The Current State of Web Polyfills

=== Polyfilling: Past, Present and Future

If you play a game of word association with a room full of front-end developers, _polyfill_ will no-doubt receive mention from more than a few participants. This word, traditionally a synonym for _fallback_, _spackle_ or _patch_--unfamiliar to many developers until just a few years ago--has become a staple of conversations about modern and open web technologies. And while polyfilling has traditionally functioned as a practice for delivering modern features to non-modern browsers ("oldIE," meaning IE 6-8, is increasingly a synonym for this term), the concept has expanded over the last few years to include the addition of new and experimental platform features to *all browsers*, including the newest and most cutting-edge.

Like many things in the world of technology, the practice of polyfilling is far older than its name. And even though the term itself is a recent addition to the web platform cannon, as long as we've had multiple browsers with varying and inconsistent implementations of web platform features--which is just about always--we've had the practice of polyfilling. Every developer who mucks with the string prototype to add a +trim()+ function for *oldIE* is creating a polyfill, as is the developer who lovingly adds a home-grown +window.addEventListner()+ function to IE 8 in the hopes of simplifying her event management code. As a practice, polyfilling has been around the block a few times, but its naming coincides with a time in which its use on the web exploded: the advent of HTML5.

Much like the coining of "Ajax" by Jesse-James Garret in 2005, the practice was given a name at a time when developers where increasingly looking at HTML5 and thinking "how can I get me some of that in my apps?" Part of the answer at the time was polyfilling and, in many ways, it's been an adequate answer. For the last four years, polyfilling has allowed developers to target multiple browsers with new technologies, while not leaving those oldIE users behind. This is polyfilling's past, and also its present. We still live in a world where the predominant use case for a polyfill is "filling the gaps" in a browser that doesn't yet natively provide a feature or features that we need. 

Were that the end of the story, I don't think an entire book on polyfills would be very interesting. Thankfully, it's not. Instead, a subtle shift in how we look at polyfilling is taking place in the web community. Rather than simply building polyfills to modernize older browsers, a new class of library is starting to emerge. These libraries, sometimes called "forward polyfills" or prolyfills exist to try out new ideas and unproven specifications on the web. This can be something as simple as a library that adds Classes to JavaScript in accordance with the ES6 specification, or as complex as a full suite of libraries that provide advance support for Web Components.

It's a powerful application, and this new class of polyfill is shifting the balance of power on the web. Increasingly, these libraries are allowing us, lowly web developers, to emerge as not just authors of web sites and applications, but as architects of the web platform itself. It's an exciting time to be a polyfiller, so I hope you'll read on.

=== A Book on Polyfilling? Really? 

When it comes to the act of patching browser capabilities via polyfills, developers fall into two camps: those *using* polyfills to provide modern web platform capabilities in their sites, and those building polyfills for the broader web community. The book is meant for the latter camp, and is intended to serve as an introduction to polyfilling, to provide a set of principles and practical guidelines for building *reliable polyfills*, and finally, to provide a roadmap for the future of polyfilling. As I shared previously, that future is the construction of polyfills that add developer-defined and cutting-edge features into the browser as a way to prove the value of new and unproven ideas.

At present, countless articles and book chapters exist which cover the subject of polyfilling. However, in nearly every case, these articles are targeted at polyfill consumers, and not the intrepid developers who build these libraries. One notable exception is http://addyosmani.com/blog/writing-polyfills[Addy Osmani's guide for Polyfill developers], an introductory read that I highly recommend. Beyond Addy's article, there are few resources, online or in print, which cover the topic of polyfills from the viewpoint of the polyfill developer. A lack of definitive resources for building these libraries means that we, as developers must strike out on our own, or slowly dig through other libraries for patterns and ideas.

My sincere hope is that this book will "close the gap" by serving as a *fieldbook* for polyfill developers. We'll start with a cursory introduction to polyfilling on the web platform, and I'll share some principles and guidelines for building polyfills that developers can rely on. Once the guidelines have been established, we'll shift the discussion to an in-depth walkthrough of building a real-life, reasonably complex polyfill, by example.

Once I’ve covered the ins-and outs of building polyfills, the last few chapters will shift the focus to an emerging trend on the web platform: the “experimental feature” polyfill, or *prollyfill*. This pattern, as seen in libraries like AngularJS and Google's http://polymer-project.org[Polymer Project], enables developers to test and work with emerging concepts, sometimes ahead of even the browser vendors themselves. By the time we're done, you'll have all the tools you need to build reliable polyfills for the present, and the future, of the web.

=== What is a Polyfill (and what is it not)?

In 2009, as he was working on the seminal book, -Introducing HTML5-, Remy Sharp conceived and coin the term "polyfill" to describe a practice that he'd seen increasingly applied by developers adopting HTML5 and CSS3 in their applications. In a post on his blog from 2010, he defines it like so:

[quote, Remy Sharp, http://remysharp.com/2010/10/08/what-is-a-polyfill/]
____
A polyfill, or polyfiller, is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. Flattening the API landscape if you will.
____

For those of you in the UK, the term "polyfill," might evoke images of "polyfilla," a paste that Britons use to cover cracks and holes in walls (We call this "speckling," in the US). It's a convenient image that happens to describe exactly what good polyfills strive to do: fill in the gaps and holes of browsers so that a developer can go to work on a smooth, consistent surface.

The term also has a more direct, deeper meaning if analyzed in parts, "poly" and "fill." *Fill* denotes the hole in the browser that the library exists to address, and *poly* means that the problem can be solved by using any number of techniques. JavaScript might be the predominant polyfilling approach, but there are several examples of Polyfills that fall back to plugins like Silverlight  or Flash to provide functionality to the browser. Notable examples of these are the http://code.google.com/p/explorercanvas/[excanvas] plugin, which falls back to Silverlight to provide Canvas support in IE6-8 and http://mediaelementjs.com/[mediaelement.js], which provides consistent HTML5 media support across browsers.

According to Sharp, the practice that we now refer to as polyfilling needed a new term because existing terms didn't map to the idea of replicating the API of native browser features using JavaScript. Polyfills are distinct from "shimming" and "progressive enhancement," in that regard. "Shim" does describe a library or bit of code that adds features or functionality to the browser, and may even provide an abstraction that spans cross-browser inconsistencies, but these libraries often introduce their own, specialized APIs. jQuery, which was first introduced as a way to normalize DOM interactions across browsers, is a popular example of a shim. 

"Progressive enhancement," and it's cousin "graceful degradation," didn't work for this idea either, simply because these terms imply building sites that either gain functionality with JavaScript, or which remain functional in the absence of JavaScript. Polyfills often depend on JavaScript in the absence of native browser functionality and, as such, neither of these terms seemed appropriate.

When Remy Sharp conceived of the term "polyfill," he wasn't attempting to coin a new phrase for austerity but, rather, to describe an increasingly relevant practice that would undoubtably become even more important as HTML5 and the "open web" continued to proliferate throughout the development world. 

=== Common Types of Polyfills

=== Challenges and Considerations for Building Polyfills

=== Why Polyfills still matter 